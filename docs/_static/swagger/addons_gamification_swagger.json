{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Gamification Rest Api",
    "description" : "Gamification addon rest endpoints",
    "license" : {
      "name" : "LGPL",
      "url" : "https://www.gnu.org/licenses/lgpl-3.0.en.html"
    },
    "version" : "1.0"
  },
  "tags" : [ {
    "name" : "/gamification/announcement/api",
    "description" : "Manages announcement associated to users"
  }, {
    "name" : "/challenge/api",
    "description" : "Manages challenge associated to users"
  }, {
    "name" : "/gamification/rules",
    "description" : "Manages rules"
  }, {
    "name" : "/gamification/realizations/api",
    "description" : "Manages users realizations"
  } ],
  "paths" : {
    "/gamification/announcement/api/ByChallengeId/{challengeId}" : {
      "get" : {
        "tags" : [ "/gamification/announcement/api" ],
        "summary" : "Retrieves the list of challenges available for an owner",
        "description" : "Retrieves the list of challenges available for an owner",
        "operationId" : "getAllAnnouncementByChallenge",
        "parameters" : [ {
          "name" : "challengeId",
          "in" : "path",
          "description" : "id of the challenge",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/announcement/api/addAnnouncement" : {
      "post" : {
        "tags" : [ "/gamification/announcement/api" ],
        "summary" : "Creates a new Announcement",
        "description" : "Creates a new Announcement",
        "operationId" : "createAnnouncement",
        "requestBody" : {
          "description" : "Announcement object to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AnnouncementActivity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "403" : {
            "description" : "Forbidden operation"
          }
        }
      }
    },
    "/gamification/api/v1/domains" : {
      "get" : {
        "operationId" : "getDomains",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/api/v1/events" : {
      "get" : {
        "operationId" : "getAllEvents",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/api/v1/leaderboard/date" : {
      "get" : {
        "operationId" : "getLeaderboardByDate",
        "parameters" : [ {
          "name" : "earnerType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/api/v1/points" : {
      "get" : {
        "operationId" : "getAllPointsByUserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/api/v1/points/date" : {
      "get" : {
        "operationId" : "getAllPointsByUserIdByDate",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/badges/add" : {
      "post" : {
        "operationId" : "addBadge",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/BadgeDTO"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/badges/all" : {
      "get" : {
        "operationId" : "getAllBadges",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/badges/delete/{id}" : {
      "delete" : {
        "operationId" : "deleteBadge",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/badges/update" : {
      "put" : {
        "operationId" : "updateBadge",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/BadgeDTO"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/challenges" : {
      "get" : {
        "tags" : [ "/challenge/api" ],
        "summary" : "Retrieves the list of challenges available for an owner",
        "description" : "Retrieves the list of challenges available for an owner",
        "operationId" : "getAllChallengesByUser",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "groupByDomain",
          "in" : "query",
          "description" : "Group challenges by domain",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "domainId",
          "in" : "query",
          "description" : "Used to filter challenges by domain",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "announcements",
          "in" : "query",
          "description" : "Number of announcements per challenge",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "term",
          "in" : "query",
          "description" : "term to search challenges with",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Challenge period filtering. Possible values: STARTED, NOT_STARTED, ENDED, ALL",
          "schema" : {
            "type" : "string",
            "default" : "ALL"
          }
        }, {
          "name" : "orderByRealizations",
          "in" : "query",
          "description" : "is popular challenges",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "excludedChallengesIds",
          "in" : "query",
          "description" : "Excluded challenges Ids",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "/challenge/api" ],
        "summary" : "Updates an existing challenge",
        "description" : "Updates an existing challenge",
        "operationId" : "updateChallenge",
        "requestBody" : {
          "description" : "challenge object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Challenge"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Request fulfilled"
          },
          "404" : {
            "description" : "Object not found"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "/challenge/api" ],
        "summary" : "Creates a new challenge",
        "description" : "Creates a new challenge",
        "operationId" : "createChallenge",
        "requestBody" : {
          "description" : "Challenge object to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Challenge"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/challenges/canAddChallenge" : {
      "get" : {
        "tags" : [ "/challenge/api" ],
        "summary" : "check if the current user can add a challenge",
        "description" : "This checks if the current user user can add a challenge",
        "operationId" : "canAddChallenge",
        "responses" : {
          "200" : {
            "description" : "User ability to add a challenge is returned"
          },
          "401" : {
            "description" : "User not authorized to add a challenge"
          }
        }
      }
    },
    "/gamification/challenges/{challengeId}" : {
      "get" : {
        "tags" : [ "/challenge/api" ],
        "summary" : "Retrieves a challenge by its id",
        "description" : "returns selected challenge if exists",
        "operationId" : "getChallengeById",
        "parameters" : [ {
          "name" : "challengeId",
          "in" : "path",
          "description" : "Challenge technical id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "403" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/challenges/{id}" : {
      "delete" : {
        "tags" : [ "/challenge/api" ],
        "summary" : "check if the current user can add a challenge",
        "description" : "This checks if the current user user can add a challenge",
        "operationId" : "deleteChallenge",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "challenge id to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "challenge deleted"
          },
          "401" : {
            "description" : "User not authorized to delete a challenge"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "404" : {
            "description" : "Object not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/domains" : {
      "get" : {
        "summary" : "Retrieves the list of available domains",
        "operationId" : "getDomains_1",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of results to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of results to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Domains type filtering, possible values: AUTOMATIC, MANUAL and ALL. Default value = AUTOMATIC.",
          "schema" : {
            "type" : "string",
            "default" : "AUTOMATIC"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Domains status filtering, possible values: ENABLED, DISABLED and ALL. Default value = ENABLED.",
          "schema" : {
            "type" : "string",
            "default" : "ENABLED"
          }
        }, {
          "name" : "sortByBudget",
          "in" : "query",
          "description" : "If true, this will return the filtered domains sorted by budget. Possible values = true or false. Default value = false.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "If true, this will return the filtered domains including deleted domains. Possible values = true or false. Default value = false.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "returnSize",
          "in" : "query",
          "description" : "If true, this will return the total count of filtered domains. Possible values = true or false. Default value = false.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Term to search.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a domain",
        "operationId" : "createDomain",
        "requestBody" : {
          "description" : "Domain object to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DomainDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/domains/canAddProgram" : {
      "get" : {
        "summary" : "check if the current user can add a program",
        "operationId" : "canAddProgram",
        "responses" : {
          "200" : {
            "description" : "User ability to add a program is returned"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/domains/{domainId}" : {
      "get" : {
        "summary" : "Retrieves a domain by its id",
        "operationId" : "getDomainById",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "domain id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an existing domain identified by its id",
        "operationId" : "deleteDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "domain id to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "404" : {
            "description" : "Object not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/domains/{id}" : {
      "put" : {
        "summary" : "updates created domain",
        "operationId" : "updateDomain",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "domain id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "domain object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DomainDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/domains/{id}/cover" : {
      "get" : {
        "summary" : "Gets a domain cover",
        "operationId" : "getDomainCoverById",
        "parameters" : [ {
          "name" : "lastModified",
          "in" : "query",
          "description" : "The value of lastModified parameter will determine whether the query should be cached by browser or not. If not set, no 'expires HTTP Header will be sent'",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "domain id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "r",
          "in" : "query",
          "description" : "A mandatory valid token that is used to authorize anonymous request",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "403" : {
            "description" : "Forbidden request"
          },
          "404" : {
            "description" : "Resource not found"
          }
        }
      }
    },
    "/gamification/gameficationinformationsboard/history/all" : {
      "get" : {
        "operationId" : "getAllLeadersByRank",
        "parameters" : [ {
          "name" : "capacity",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "providerId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "remoteId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/leaderboard/filter" : {
      "get" : {
        "operationId" : "filter",
        "parameters" : [ {
          "name" : "domain",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "capacity",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/leaderboard/rank/all" : {
      "get" : {
        "operationId" : "getAllLeadersByRank_1",
        "parameters" : [ {
          "name" : "earnerType",
          "in" : "query",
          "description" : "Get leaderboard of user or space",
          "schema" : {
            "type" : "string",
            "default" : "user"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of identities to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "Period name, possible values: WEEK, MONTH or ALL",
          "schema" : {
            "type" : "string",
            "default" : "ALL"
          }
        }, {
          "name" : "loadCapacity",
          "in" : "query",
          "description" : "Get only the top 10 or all",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/leaderboard/stats" : {
      "get" : {
        "operationId" : "stats",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/realizations/api/allRealizations" : {
      "get" : {
        "tags" : [ "/gamification/realizations/api" ],
        "summary" : "Retrieves the list of achievements switch a filter. The returned format can be of type JSON or XLSX",
        "description" : "Retrieves the list of challenges available for an owner",
        "operationId" : "getAllRealizations",
        "parameters" : [ {
          "name" : "fromDate",
          "in" : "query",
          "description" : "result fromDate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "result toDate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort field. Possible values: date or actionType.",
          "schema" : {
            "type" : "string",
            "default" : "date"
          }
        }, {
          "name" : "sortDescending",
          "in" : "query",
          "description" : "Whether to retrieve results sorted descending or not",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "earnerIds",
          "in" : "query",
          "description" : "earnerIds, that will be used to filter achievements",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "returnType",
          "in" : "query",
          "description" : "Response Type",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "identityType",
          "in" : "query",
          "description" : "identity Type",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "domainIds",
          "in" : "query",
          "description" : "domainIds. that will be used to filter achievements",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "returnSize",
          "in" : "query",
          "description" : "If true, this will return the total count of filtered realizations. Possible values = true or false. Default value = false.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/realizations/api/updateRealizations" : {
      "put" : {
        "tags" : [ "/gamification/realizations/api" ],
        "summary" : "Updates an existing realization",
        "description" : "Updates an existing realization",
        "operationId" : "updateRealizations",
        "parameters" : [ {
          "name" : "realizationId",
          "in" : "query",
          "description" : "id of realization",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "new status of realization",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "actionLabel",
          "in" : "query",
          "description" : "new action Label of realization",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "points",
          "in" : "query",
          "description" : "new points of realization",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "new domain of realization",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request fulfilled"
          },
          "404" : {
            "description" : "Object not found"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/reputation/AllofBadges" : {
      "get" : {
        "operationId" : "getAllOfBadges",
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/badge/{badge}/avatar" : {
      "get" : {
        "operationId" : "getBadgeAvatarById",
        "parameters" : [ {
          "name" : "badge",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/badges" : {
      "get" : {
        "operationId" : "getUserBadges_1",
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/badges/{identityId}" : {
      "get" : {
        "operationId" : "getUserBadges",
        "parameters" : [ {
          "name" : "identityId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/otherBadges" : {
      "get" : {
        "operationId" : "getOtherBadges",
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/stats" : {
      "get" : {
        "operationId" : "stat",
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/status" : {
      "get" : {
        "operationId" : "getReputationStatus",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/reputation/won" : {
      "get" : {
        "operationId" : "getallBadges",
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/rules" : {
      "get" : {
        "tags" : [ "/gamification/rules" ],
        "summary" : "Retrieves the list of available rules",
        "operationId" : "getRules",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of results to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of results to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "domainId",
          "in" : "query",
          "description" : "Used to filter rules by domain",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Rules type filtering, possible values: AUTOMATIC, MANUAL and ALL. Default value = ALL.",
          "schema" : {
            "type" : "string",
            "default" : "ALL"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Rules status filtering, possible values: ENABLED, DISABLED and ALL. Default value = ENABLED.",
          "schema" : {
            "type" : "string",
            "default" : "ENABLED"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "If true, this will return the filtered rules including deleted rules. Possible values = true or false. Default value = false.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "term",
          "in" : "query",
          "description" : "term to search rules with",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnSize",
          "in" : "query",
          "description" : "If true, this will return the total count of filtered domains. Possible values = true or false. Default value = false.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "/gamification/rules" ],
        "summary" : "Updates a rule",
        "operationId" : "updateRule",
        "requestBody" : {
          "description" : "rule object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Request fulfilled"
          },
          "404" : {
            "description" : "Object not found"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "/gamification/rules" ],
        "summary" : "Creates a rule",
        "operationId" : "createRule",
        "requestBody" : {
          "description" : "rule object to save",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/rules/active" : {
      "get" : {
        "tags" : [ "/gamification/rules" ],
        "operationId" : "getActiveRules",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/rules/{ruleId}" : {
      "delete" : {
        "tags" : [ "/gamification/rules" ],
        "summary" : "Deletes a rule",
        "operationId" : "deleteRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Rule technical identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request fulfilled"
          },
          "404" : {
            "description" : "Object not found"
          },
          "400" : {
            "description" : "Invalid query input"
          },
          "401" : {
            "description" : "Unauthorized operation"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/gamification/space/leaderboard/filter" : {
      "get" : {
        "operationId" : "filter_1",
        "parameters" : [ {
          "name" : "domain",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "capacity",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/gamification/space/leaderboard/overall" : {
      "get" : {
        "operationId" : "getAllLeadersByRank_2",
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AnnouncementActivity" : {
        "type" : "object",
        "properties" : {
          "activityId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "assignee" : {
            "type" : "integer",
            "format" : "int64"
          },
          "challengeId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "challengeTitle" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string"
          },
          "creator" : {
            "type" : "integer",
            "format" : "int64"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "templateParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "BadgeDTO" : {
        "type" : "object",
        "properties" : {
          "createdBy" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "domainDTO" : {
            "$ref" : "#/components/schemas/DomainDTO"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "endValidityDate" : {
            "type" : "string"
          },
          "icon" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "iconFileId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModifiedBy" : {
            "type" : "string"
          },
          "lastModifiedDate" : {
            "type" : "string"
          },
          "neededScore" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startValidityDate" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "uploadId" : {
            "type" : "string"
          }
        }
      },
      "Challenge" : {
        "type" : "object",
        "properties" : {
          "audience" : {
            "type" : "integer",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "endDate" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "managers" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "points" : {
            "type" : "integer",
            "format" : "int64"
          },
          "program" : {
            "type" : "string"
          },
          "programId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "startDate" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "DomainDTO" : {
        "type" : "object",
        "properties" : {
          "audienceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "budget" : {
            "type" : "integer",
            "format" : "int64"
          },
          "coverFileId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "coverUploadId" : {
            "type" : "string"
          },
          "coverUrl" : {
            "type" : "string"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModifiedBy" : {
            "type" : "string"
          },
          "lastModifiedDate" : {
            "type" : "string"
          },
          "owners" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "title" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RuleDTO" : {
        "type" : "object",
        "properties" : {
          "area" : {
            "type" : "string"
          },
          "audience" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "domainDTO" : {
            "$ref" : "#/components/schemas/DomainDTO"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "endDate" : {
            "type" : "string"
          },
          "event" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModifiedBy" : {
            "type" : "string"
          },
          "lastModifiedDate" : {
            "type" : "string"
          },
          "managers" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "score" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "AUTOMATIC", "MANUAL" ]
          }
        }
      }
    }
  }
}